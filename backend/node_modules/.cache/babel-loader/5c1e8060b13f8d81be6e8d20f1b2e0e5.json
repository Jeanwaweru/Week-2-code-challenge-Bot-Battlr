{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jean/development/code/phase2/Week-2-Challenge-2-Bot-Battlr-021023/Challenge-2-Bot-Battlr/code-challenge/src/components/BotCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nconst botTypeClasses = {\n  Assault: \"icon military\",\n  Defender: \"icon shield\",\n  Support: \"icon plus circle\",\n  Medic: \"icon ambulance\",\n  Witch: \"icon magic\",\n  Captain: \"icon star\"\n};\n\nfunction BotCard({\n  bot,\n  botsArmy,\n  setBotsArmy,\n  onDelete,\n  setOnDelete\n}) {\n  _s();\n\n  useEffect(() => {\n    // Load bots army from local storage on component mount\n    const storedBotsArmy = JSON.parse(localStorage.getItem(\"botsArmy\")) || [];\n    setBotsArmy(storedBotsArmy);\n  }); // Adding bot to army\n\n  function handleAddArmy(bot) {\n    // Check if the bot is already in the army\n    const botExists = botsArmy.some(armyBot => armyBot.id === bot.id); // If the bot doesn't exist in the army, add it and update local storage\n\n    if (!botExists) {\n      setBotsArmy([...botsArmy, bot]);\n      localStorage.setItem(\"botsArmy\", JSON.stringify([...botsArmy, bot]));\n    } else {\n      console.log(\"Bot already exists in the army\");\n    }\n  } // Deleting bot\n\n\n  function handleDelete(id) {\n    fetch(\"http://localhost:8002/bots\", {\n      method: \"DELETE\"\n    }).then(response => response.json()).then(() => {\n      alert(\"Deleted Successfully\");\n      setOnDelete(!onDelete);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui column\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleAddArmy(bot),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"oh no!\",\n            src: bot.avatar_url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header\",\n            children: [bot.name, /*#__PURE__*/_jsxDEV(\"i\", {\n              className: botTypeClasses[bot.bot_class]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"meta text-wrap\",\n            children: /*#__PURE__*/_jsxDEV(\"small\", {\n              children: bot.catchphrase\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"extra content\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"icon heartbeat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this), bot.health]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"icon lightning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this), bot.damage]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"icon shield\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this), bot.armor]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, bot.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui center aligned segment basic\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ui mini red button\",\n          onClick: () => handleDelete(bot.id),\n          children: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BotCard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = BotCard;\nexport default BotCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"BotCard\");","map":{"version":3,"sources":["/home/jean/development/code/phase2/Week-2-Challenge-2-Bot-Battlr-021023/Challenge-2-Bot-Battlr/code-challenge/src/components/BotCard.js"],"names":["React","useEffect","botTypeClasses","Assault","Defender","Support","Medic","Witch","Captain","BotCard","bot","botsArmy","setBotsArmy","onDelete","setOnDelete","storedBotsArmy","JSON","parse","localStorage","getItem","handleAddArmy","botExists","some","armyBot","id","setItem","stringify","console","log","handleDelete","fetch","method","then","response","json","alert","avatar_url","name","bot_class","catchphrase","health","damage","armor"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\n\nconst botTypeClasses = {\n  Assault: \"icon military\",\n  Defender: \"icon shield\",\n  Support: \"icon plus circle\",\n  Medic: \"icon ambulance\",\n  Witch: \"icon magic\",\n  Captain: \"icon star\",\n};\n\nfunction BotCard({ bot, botsArmy, setBotsArmy, onDelete, setOnDelete }) {\n  useEffect(() => {\n    // Load bots army from local storage on component mount\n    const storedBotsArmy = JSON.parse(localStorage.getItem(\"botsArmy\")) || [];\n    setBotsArmy(storedBotsArmy);\n  },);\n  \n// Adding bot to army\nfunction handleAddArmy(bot) {\n  // Check if the bot is already in the army\n  const botExists = botsArmy.some((armyBot) => armyBot.id === bot.id);\n  \n  // If the bot doesn't exist in the army, add it and update local storage\n  if (!botExists) {\n      setBotsArmy([...botsArmy, bot]);\n      localStorage.setItem(\"botsArmy\", JSON.stringify([...botsArmy, bot]));\n    } \n  else {\n    console.log(\"Bot already exists in the army\");\n    }\n}\n\n\n  // Deleting bot\n  function handleDelete(id) {\n    fetch(\"http://localhost:8002/bots\", {\n      method: \"DELETE\",\n    })\n      .then((response) => response.json())\n      .then(() => {\n        alert(\"Deleted Successfully\");\n        setOnDelete(!onDelete);\n      });\n  }\n\n  return (\n    <div className=\"ui column\">\n      <div className=\"ui card\">\n        <div key={bot.id} onClick={() => handleAddArmy(bot)}>\n          <div className=\"image\">\n            <img alt=\"oh no!\" src={bot.avatar_url} />\n          </div>\n          <div className=\"content\">\n            <div className=\"header\">\n              {bot.name}\n              <i className={botTypeClasses[bot.bot_class]} />\n            </div>\n            <div className=\"meta text-wrap\">\n              <small>{bot.catchphrase}</small>\n            </div>\n          </div>\n          <div className=\"extra content\">\n            <span>\n              <i className=\"icon heartbeat\" />\n              {bot.health}\n            </span>\n            <span>\n              <i className=\"icon lightning\" />\n              {bot.damage}\n            </span>\n            <span>\n              <i className=\"icon shield\" />\n              {bot.armor}\n            </span>\n          </div>\n        </div>\n        <div className=\"ui center aligned segment basic\">\n          <button\n            className=\"ui mini red button\"\n            onClick={() => handleDelete(bot.id)}\n          >\n            x\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default BotCard;"]},"metadata":{},"sourceType":"module"}